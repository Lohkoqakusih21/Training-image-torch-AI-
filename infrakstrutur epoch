import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
# Asumsikan dataset dan transformasi sudah didefinisikan
# from your_dataset import YourDataset

class DynamicCNN(nn.Module):
    def __init__(self, iteration):
        super(DynamicCNN, self).__init__()
        self.iteration = iteration
        self.define_architecture()

    def define_architecture(self):
        if self.iteration == 1:
            self.conv1 = nn.Conv2d(3, 32, 5)
            self.conv2 = nn.Conv2d(32, 64, 5)
            self.conv3 = nn.Conv2d(64, 128, 3)
            self.conv4 = nn.Conv2d(128, 256, 5)
        elif self.iteration == 2:
            self.conv1 = nn.Conv2d(3, 48, 3)
            self.conv2 = nn.Conv2d(48, 96, 3)
            self.conv3 = nn.Conv2d(96, 192, 3)
            self.conv4 = nn.Conv2d(192, 384, 3)
        # ... definisikan arsitektur untuk iterasi 3-8 sesuai dengan kode sebelumnya ...

        # Lapisan tambahan
        self.pool = nn.MaxPool2d(2, 2)
        self.flatten = nn.Flatten()
        self.fc1 = nn.Linear(384 * 5 * 5, 120)  # Sesuaikan ukuran input sesuai arsitektur
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)  # Asumsikan 10 kelas output

    def forward(self, x):
        x = self.pool(torch.relu(self.conv1(x)))
        x = self.pool(torch.relu(self.conv2(x)))
        x = torch.relu(self.conv3(x))
        x = self.pool(torch.relu(self.conv4(x)))
        x = self.flatten(x)
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

def train(model, train_loader, criterion, optimizer, device):
    model.train()
    running_loss = 0.0
    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
    return running_loss / len(train_loader)

def validate(model, val_loader, criterion, device):
    model.eval()
    running_loss = 0.0
    correct = 0
    total = 0
    with torch.no_grad():
        for inputs, labels in val_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            running_loss += loss.item()
            _, predicted = outputs.max(1)
            total += labels.size(0)
            correct += predicted.eq(labels).sum().item()
    accuracy = 100. * correct / total
    return running_loss / len(val_loader), accuracy

# Konfigurasi
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
num_epochs = 50
learning_rate = 0.001
batch_size = 64

# Dataset dan DataLoader
# train_dataset = YourDataset(...)
# val_dataset = YourDataset(...)
# train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
# val_loader = DataLoader(val_dataset, batch_size=batch_size)

# Loop utama untuk setiap iterasi arsitektur
for iteration in range(1, 9):
    print(f"Training architecture iteration {iteration}")
    model = DynamicCNN(iteration).to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=learning_rate)

    for epoch in range(num_epochs):
        train_loss = train(model, train_loader, criterion, optimizer, device)
        val_loss, val_accuracy = validate(model, val_loader, criterion, device)
        
        print(f"Epoch {epoch+1}/{num_epochs}, "
              f"Train Loss: {train_loss:.4f}, "
              f"Val Loss: {val_loss:.4f}, "
              f"Val Accuracy: {val_accuracy:.2f}%")

    # Simpan model
    torch.save(model.state_dict(), f"model_iteration_{iteration}.pth")

print("Training completed for all architectural iterations.")
